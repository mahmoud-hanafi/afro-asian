<?php

namespace Drupal\xmlsitemap\Controller;

use Drupal\Component\Serialization\Json;
use Drupal\Core\Controller\ControllerBase;
use Drupal\xmlsitemap\Entity\XmlSitemap;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Drupal\Core\State\StateInterface;
use Symfony\Component\HttpFoundation\Request;

/**
 * Class for Xml Sitemap Controller.
 *
 * Returns responses for xmlsitemap.sitemap_xml and xmlsitemap.sitemap_xsl
 * routes.
 */
class XmlSitemapController extends ControllerBase {

  /**
   * The state store.
   *
   * @var \Drupal\Core\State\StateInterface
   */
  protected $state;

  /**
   * Constructs a new XmlSitemapController object.
   *
   * @param \Drupal\Core\State\StateInterface $state
   *   The state service.
   */
  public function __construct(StateInterface $state) {
    $this->state = $state;
  }

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container) {
    return new static(
      $container->get('state')
    );
  }

  /**
   * Provides the sitemap in XML format.
   *
   * @param \Symfony\Component\HttpFoundation\Request $request
   *   The request object.
   *
   * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
   *
   * @return \Symfony\Component\HttpFoundation\Response
   *   The sitemap in XML format or plain text if xmlsitemap_developer_mode flag
   *   is set.
   */
  public function renderSitemapXml(Request $request) {
    $headers = [];

    if ($this->state->get('xmlsitemap_developer_mode')) {
      $headers['X-XmlSitemap-Current-Context'] = Json::encode(xmlsitemap_get_current_context());
      $headers['X-XmlSitemap'] = 'NOT FOUND';
    }

    $sitemap = XmlSitemap::loadByContext();
    if (!$sitemap) {
      $exception = new NotFoundHttpException();
      $exception->setHeaders($headers);
      throw $exception;
    }

    $chunk = xmlsitemap_get_current_chunk($sitemap, $request);
    $file = xmlsitemap_sitemap_get_file($sitemap, $chunk);

    // Provide debugging information via headers.
    if ($this->state->get('xmlsitemap_developer_mode')) {
      $headers['X-XmlSitemap'] = Json::encode($sitemap->toArray());
      $headers['X-XmlSitemap-Cache-File'] = $file;
      $headers['X-XmlSitemap-Cache-Hit'] = file_exists($file) ? 'HIT' : 'MISS';
    }

    if (!is_file($file) || !is_readable($file)) {
      $exception = new NotFoundHttpException();
      $exception->setHeaders($headers);
      throw $exception;
    }

    return xmlsitemap_output_file(new Response(), $file, $headers);
  }

  /**
   * Provides the sitemap in XSL format.
   *
   * @return \Symfony\Component\HttpFoundation\Response
   *   Response object in XSL format.
   */
  public function renderSitemapXsl() {
    // Read the XSL content from the file.
    $module_path = drupal_get_path('module', 'xmlsitemap');
    $xsl_content = file_get_contents($module_path . '/xsl/xmlsitemap.xsl');

    // Make sure the strings in the XSL content are translated properly.
    $replacements = [
      'Sitemap file' => $this->t('Sitemap file'),
      'Generated by the <a href="https://www.drupal.org/project/xmlsitemap">Drupal XML sitemap module</a>.' => $this->t('Generated by the <a href="@link-xmlsitemap">Drupal XML sitemap module</a>.', ['@link-xmlsitemap' => 'https://www.drupal.org/project/xmlsitemap']),
      'Number of sitemaps in this index' => $this->t('Number of sitemaps in this index'),
      'Click on the table headers to change sorting.' => $this->t('Click on the table headers to change sorting.'),
      'Sitemap URL' => $this->t('Sitemap URL'),
      'Last modification date' => $this->t('Last modification date'),
      'Number of URLs in this sitemap' => $this->t('Number of URLs in this sitemap'),
      'URL location' => $this->t('URL location'),
      'Change frequency' => $this->t('Change frequency'),
      'Priority' => $this->t('Priority'),
      '[jquery]' => base_path() . 'core/assets/vendor/jquery/jquery.js',
      '[jquery-tablesort]' => base_path() . $module_path . '/xsl/jquery.tablesorter.min.js',
      '[xsl-js]' => base_path() . $module_path . '/xsl/xmlsitemap.xsl.js',
      '[xsl-css]' => base_path() . $module_path . '/xsl/xmlsitemap.xsl.css',
    ];
    $xsl_content = strtr($xsl_content, $replacements);

    // Output the XSL content.
    $response = new Response($xsl_content);
    $response->headers->set('Content-type', 'application/xml; charset=utf-8');
    $response->headers->set('X-Robots-Tag', 'noindex, nofollow');
    return $response;
  }

}
