<?php

/**
 * @file
 * Implements PayPal payment services for use with Drupal Commerce.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\commerce_paypal\Plugin\Commerce\PaymentGateway\CheckoutInterface;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function commerce_paypal_form_views_form_commerce_cart_form_default_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\views\ViewExecutable $view */
  $view = reset($form_state->getBuildInfo()['args']);
  // Only add the smart payment buttons if the cart form view has order items.
  if (empty($view->result)) {
    return;
  }
  $order_id = $view->args[0];
  $entity_type_manager = \Drupal::entityTypeManager();
  /** @var \Drupal\commerce_payment\PaymentGatewayStorageInterface $payment_gateway_storage */
  $payment_gateway_storage = $entity_type_manager->getStorage('commerce_payment_gateway');
  $order = $entity_type_manager->getStorage('commerce_order')->load($order_id);
  // Load the payment gateways. This fires an event for filtering the
  // available gateways, and then evaluates conditions on all remaining ones.
  $payment_gateways = $payment_gateway_storage->loadMultipleForOrder($order);
  // Can't proceed without any payment gateways.
  if (empty($payment_gateways)) {
    return;
  }
  foreach ($payment_gateways as $payment_gateway) {
    if (!$payment_gateway->getPlugin() instanceof CheckoutInterface) {
      continue;
    }
    $form['paypal_smart_payment_buttons'] = [
      '#type' => 'commerce_paypal_smart_payment_buttons',
      '#commit' => FALSE,
      '#order' => $order,
      '#payment_gateway' => $payment_gateway,
      '#weight' => 100,
    ];
    break;
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter(). for commerce_checkout_flow.
 */
function commerce_paypal_form_commerce_checkout_flow_alter(&$form, FormStateInterface $form_state) {
  if ($form['#step_id'] !== 'review') {
    return;
  }
  /**
   * @var \Drupal\commerce_order\Entity\OrderInterface $order
   */
  $order = \Drupal::routeMatch()->getParameter('commerce_order');
  if ($order->get('payment_method')->isEmpty() ||
    $order->get('payment_gateway')->isEmpty() ||
    $order->get('checkout_flow')->target_id == 'paypal_checkout') {
    return;
  }
  /** @var \Drupal\commerce_payment\Entity\PaymentGatewayInterface $payment_gateway */
  $payment_gateway = $order->payment_gateway->entity;
  $payment_gateway_plugin = $payment_gateway->getPlugin();
  if (!$payment_gateway_plugin instanceof CheckoutInterface) {
    return;
  }
  $form['paypal_smart_payment_buttons'] = [
    '#type' => 'commerce_paypal_smart_payment_buttons',
    '#commit' => TRUE,
    '#order' => $order,
    '#payment_gateway' => $payment_gateway,
    '#weight' => 10,
  ];
  $form['actions']['#access'] = FALSE;
}
